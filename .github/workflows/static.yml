# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to tway.dev

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install dependencies (pandoc + make)
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc make

      - name: Build site with Makefile
        run: make build
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Telegram
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          STATUS: ${{ job.status }}
        run: |
          set -e
          esc() {
            echo "$1" | sed 's/\./\\./g; s/\//\\&/g; s/-/\\&/g'
          }

          # Prepare variables
          WORKFLOW_TEXT=$(esc "${{ github.workflow }}")
          REPO_NAME="${{ github.repository }}"
          REPO_TEXT=$(esc "$REPO_NAME")
          REPO_URL="https://github.com/$REPO_NAME"
          STATUS_EMOJI="✅"
          if [ "$STATUS" != "success" ]; then
            STATUS_EMOJI="❌"
          fi
          STATUS_TEXT=$(esc "$STATUS")
          VIEW_MORE=$(esc "View more details")
          ACTION_URL="https://github.com/${REPO_NAME}/actions/runs/${{ github.run_id }}"

          # Construct message with escaped text parts
          MESSAGE="${STATUS_EMOJI} Github Actions"$'\n'
          MESSAGE="${MESSAGE}\\- Job: ${WORKFLOW_TEXT}"$'\n'
          MESSAGE="${MESSAGE}\\- Status: ${STATUS_TEXT}"$'\n'
          MESSAGE="${MESSAGE}\\- Repository: ${REPO_TEXT}"$'\n'
          # MESSAGE="${MESSAGE}\\- Repository: [${REPO_TEXT}](${REPO_URL})"$'\n'
          # MESSAGE="${MESSAGE}\\- [${VIEW_MORE}](${ACTION_URL})"
          
          # Send message
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2")
             
          if ! echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "Failed to send Telegram notification"
            echo "$RESPONSE"
            exit 1
          fi
